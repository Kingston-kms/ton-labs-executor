/*
* Copyright 2018-2020 TON DEV SOLUTIONS LTD.
*
* Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at: https://ton.dev/licenses
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific TON DEV software governing permissions and
* limitations under the License.
*/

use std::{fs::read, io::Cursor, sync::{Arc, atomic::AtomicU64}};

use pretty_assertions::assert_eq;
use ton_block::{
    Block, CurrencyCollection, Deserializable,
    accounts::{Account, ShardAccount}, messages::Message, 
    transactions::{AccountBlock, Transaction, TransactionDescr}, 
    types::InRefValue, Serializable,
};
use ton_types::{deserialize_tree_of_cells, Cell};

use crate::{
    blockchain_config::BlockchainConfig,
    OrdinaryTransactionExecutor, TransactionExecutor
};

const PATH_TO_BLOCK: &str = "real_ton_boc/blocks/";

fn block_from_file(path: &str) -> Block {
    let mut block = Block::default();
    let orig_bytes = read(path).expect(&format!("Error reading file {:?}", path));
    let cell = deserialize_tree_of_cells(&mut Cursor::new(&orig_bytes)).expect("Error deserializing BOC");
    block.read_from(&mut cell.into()).unwrap();
    block
}

fn extract_shard_account(transaction: InRefValue<Transaction>) -> Option<ShardAccount> {
    match transaction.0.read_in_msg().unwrap() {
        Some(msg) => {
            let in_message = msg.clone();
            let address = in_message.dst().expect("Error extracting Transaction");
            let balance = in_message.get_value().unwrap_or(&CurrencyCollection::default()).clone();
            let account = Account::with_address_and_ballance(&address, &balance);

            Some(ShardAccount::with_params(account, transaction.0.prev_trans_hash, transaction.0.prev_trans_lt).unwrap())
        },
        None => None,
    }
}

fn transactions_by_index_name(index: u64) -> (Vec<Transaction>, Vec<Transaction>) {
    let block = String::from(PATH_TO_BLOCK) + &(index).to_string();
    let block = block_from_file(block.as_str());
    
    let mut vec = Vec::new();
    let mut expected = Vec::new();
    block.read_extra().unwrap().read_account_blocks().unwrap().iterate(&mut |account_block: AccountBlock| {
        account_block.transactions().clone().iterate(&mut |transaction: InRefValue<Transaction>| {
            if let Some(shard_acc) = extract_shard_account(transaction.clone()) {
                let at = transaction.0.now();
                let lt = transaction.0.logical_time();
                vec.push((transaction.0.read_in_msg().unwrap().unwrap(), shard_acc.account_cell().clone(), at, lt));
                expected.push(transaction.0);
            }
            Ok(true)
        }).unwrap();
        Ok(true)
    }).unwrap();

    let config = BlockchainConfig::default();
    let executor = OrdinaryTransactionExecutor::new(config);
    let mut real = Vec::new();
    for (msg, mut acc_root, at, lt) in vec {
        let transaction_from_executor = executor.execute(
            Some(&msg), &mut acc_root, at, lt - lt % 1_000_000, Arc::new(AtomicU64::new(lt)), true
        ).unwrap();
        real.push(transaction_from_executor);
    }

    (expected, real)
}

fn not_match_by_range(first: u64, last: u64) -> Vec<(u64, Vec<Transaction>, Vec<Transaction>)> {
    let mut not_match = Vec::new();
    let mut current = first;

    while current <= last {
        let (expected_tr, tr) = transactions_by_index_name(current);
        if expected_tr.ne(&tr) {
            not_match.push((current, expected_tr, tr));
        }
        current += 1;
    }
    not_match
}

#[test]
#[ignore]
fn test_executor_with_real_data() {
    let not_match = not_match_by_range(2660, 2711);
    for (index, expected, real) in  not_match {
        assert_eq!(expected, real, "index: {}", index);
    }

    let not_match = not_match_by_range(571525, 571845);
    for (index, expected, real) in  not_match {
        assert_eq!(expected, real, "index: {}", index);
    }
}

fn deserialize_struct_from_base64<T: Default + Deserializable>(string: &str) -> T {
    let cell = deserialize_tree_of_cells(&mut base64::decode(string).unwrap().as_slice()).unwrap();
    T::construct_from(&mut cell.into()).unwrap()
}

fn test_transaction_by_str_data(account: &str, in_message: &str, transaction: &str) {
       // get structs from strings
       let account: Account = deserialize_struct_from_base64(account);
       let transaction: Transaction = deserialize_struct_from_base64(transaction);
       let message: Message = deserialize_struct_from_base64(in_message);
   
       let config = BlockchainConfig::default();
       let executor = OrdinaryTransactionExecutor::new(config);
       let mut acc_root = Cell::from(account.write_to_new_cell().unwrap());
       let at = transaction.now();
       let lt = transaction.logical_time();
       let block_lt = lt - lt % 1_000_000;
       let lt = Arc::new(AtomicU64::new(lt - 1));
       let mut our_transaction = executor.execute(Some(&message), &mut acc_root, at, block_lt, lt, true).unwrap();

       // TODO: calculate vm_steps and fix actions hash
       if let TransactionDescr::Ordinary(mut descr) = our_transaction.read_description().unwrap() {        
           descr.compute_ph.get_vmphase_mut().unwrap().vm_steps = 
               transaction.read_description().unwrap().compute_phase_ref().unwrap().clone().get_vmphase_mut().unwrap().vm_steps;
   
           // hash is not equal probably because our VM sets created_at field to the message 
           if let Some(action_ph) = &mut descr.action {
               if let TransactionDescr::Ordinary(true_descr) = transaction.read_description().unwrap() {
                   if let Some(true_action_ph) = true_descr.action {
                       action_ph.action_list_hash = true_action_ph.action_list_hash;
                   }
               }
           }
           our_transaction.write_description(&TransactionDescr::Ordinary(descr)).unwrap();
       }
   
   
       for i in 0..transaction.msg_count() {
           assert_eq!( our_transaction.get_out_msg(i).unwrap().unwrap(), transaction.get_out_msg(i).unwrap().unwrap());
       }
   
       assert_eq!(our_transaction.read_description().unwrap(), transaction.read_description().unwrap());
   
       // TODO: all transaction fields must be equal
       //assert_eq!(transaction, our_transaction);
}

// TODO: a couple fields are wrong. Fix and enable test
#[ignore]
#[test]
fn test_real_transaction() {
    test_transaction_by_str_data(ACCOUNT, IN_MESSAGE, TRANSACTION);
}

// TODO: a couple fields are wrong. Fix and enable test
#[ignore]
#[test]
fn test_real_deploy_transaction() {
    test_transaction_by_str_data(PRE_DEPLOY_ACCOUNT, DEPLOY_MESSAGE, DEPLOY_TRANSACTION);
}

const IN_MESSAGE: &str = "te6ccgEBAgEAtAABnYgAtDYt4cOzB29iwmxKBlGhGX7u1CxcLKMoT5/elN+FRhoANvMawAAAC3ej08eAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwBAMClRLwOMGZUbJtgVhaLWYKWi4rUrOvJkTO8IyPqIBkwnIX5ZpzVTUQYx18a672G2pBJSSMIRXSo/K1vqllGwHkJfe0fBBM6Loq7smUZEUni9H3lMg+OUUG+Rh1Ik5DaL6s=";
const ACCOUNT: &str = "";
const TRANSACTION: &str = "te6ccgECDgEAAtsAA7d1obFvDh2YO3sWE2JQMo0Iy/d2oWLhZRlCfP70pvwqMNAAAA2hHFGEF+MHG88TSo1HAqOO16dJKKk7VL3Sr7U+tKDDsxpKOjkwAAANoOfdyBXfDDNAAFSAsQshKAUEAQITDIBuRiAqr7wEQAMCAG/Jm3dATFd7wAAAAAAABAAAAAAABZXrjG+J5+/vtyqz9eCXyVthIJ6sp9FjsdFRAZYexJA+QNAzrACfYCu2AxOIAAAAAAAAAAEMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAgnJZ5mJTryo60Y2ThOWFZhPmY8lhubSZjKANNT2VOo/6dEbk3Hrqer5pAlZfxsNaLZnM7+1l4B7Et3ZdeUoCewlCAgHgDAYCAd0KBwEBIAgB5+AC0Ni3hw7MHb2LCbEoGUaEZfu7ULFwsoyhPn96U34VGGgAAAG0I4owhrvhhmg2kyeNwAWxaJcKnGPdXEKmr7z3Bu9lJHa7iWCiLh2KKtFI5gwOoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO5rKAICQAAAQEgCwC3CAC0Ni3hw7MHb2LCbEoGUaEZfu7ULFwsoyhPn96U34VGGwAWxaJcKnGPdXEKmr7z3Bu9lJHa7iWCiLh2KKtFI5gwOpDuaygAYtxsBhRYYAAAAbQjijCEu+GGaEABnYgAtDYt4cOzB29iwmxKBlGhGX7u1CxcLKMoT5/elN+FRhoANvMawAAAC3ej08eAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwNAMClRLwOMGZUbJtgVhaLWYKWi4rUrOvJkTO8IyPqIBkwnIX5ZpzVTUQYx18a672G2pBJSSMIRXSo/K1vqllGwHkJfe0fBBM6Loq7smUZEUni9H3lMg+OUUG+Rh1Ik5DaL6s=";

const DEPLOY_MESSAGE: &str = "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";

const PRE_DEPLOY_ACCOUNT: &str = "te6ccuEBAQEAOABwAGvAAA7HJQvTE8KDiT80fiI2wEFOR9MtdLuWNSwy0s3Jdt2iAlnC7/sJqAAAAF4gfSwJB3kSGASiGpbo";

const DEPLOY_TRANSACTION: &str = "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";